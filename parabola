#!/usr/bin/env python
# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt
from argparse import ArgumentParser

argp = ArgumentParser()
argp.add_argument("-w",
                     required=False, dest="num_waveforms", type=int, default=256,
                     help="Number of frames/waveforms (%(default)s)")
argp.add_argument("-s",
                     required=False, dest="num_samples", type=int, default=2048,
                     choices=np.power(2, np.arange(3, 12)),
                     help="Number of samples in one frame (%(default)s)")
argp.add_argument("-a",
                     required=False, dest="a", type=float, default=2.0,
                     help="Parabola a constant (%(default)s)")
argp.add_argument("-a2",
                     required=False, dest="a2", type=float, default=20.0,
                     help="Parabola 2nd a constant for moprhing (%(default)s)")
argp.add_argument("-b",
                     required=False, dest="b", type=float, default=2.0,
                     help="Parabola b constant (%(default)s)")
argp.add_argument("-c",
                     required=False, dest="c", type=float, default=5.0,
                     help="Parabola c constant (%(default)s)")
argp.add_argument("-c2",
                     required=False, dest="c2", type=float, default=30.0,
                     help="Parabola 2nd c constant for morphing (%(default)s)")
argp.add_argument("--bits",
                     required=False, dest="bitwidth", type=int, default=32, choices=[16,32],
                     help="Bits (%(default)s)")
argp.add_argument("-d",
                     required=False, dest="divisor", type=int, default=3, choices=range(1, 7),
                     help="Middle part = samples / divisor  (%(default)s)")
# TODO: morphing type
args = argp.parse_args()

sample_rate = 44100   # Sampling rate in Hz
middle_samples = args.num_samples // 3  # Number of samples to overwrite the middle

#waveforms = np.zeros((args.num_waveforms, args.num_samples))

a_arr = np.linspace(args.a, args.a2, args.num_samples) # later num_waveforms
c_arr = np.linspace(args.c, args.c2, args.num_samples) # later num_waveforms
#print(c_arr)
for iwf in range(args.num_samples):
    # numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)
    x1 = np.linspace(-args.b, 0, args.num_samples)
    x2 = np.linspace(0, args.b, args.num_samples)
    # ax^2 + bx + c
    #y1 = -args.a * x1 ** args.b + args.b * x1 - c_arr[iwf] # args.c
    #y2 =  args.a * x2 ** args.b + args.b * x2 + c_arr[iwf] # args.c
    y1 = -a_arr[iwf] * x1 ** args.b + args.b * x1 - args.c
    y2 =  a_arr[iwf] * x2 ** args.b + args.b * x2 + args.c
    #if args.num_samples <= 16:
    #    print(f'x1: {x1}\ny1: {y1}\nx2: {x2}\ny2: {y2}')

    plt.plot(x1, y1)
    plt.plot(x2, y2)

plt.xlabel('x time')
plt.ylabel('y vol')
plt.title(f'Parabola a={args.a}/{args.a2} b={args.b} c={args.c}/{args.c2} d={args.divisor} s={args.num_samples} w={args.num_waveforms}')
plt.grid(True)
plt.show()
