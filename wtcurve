#!/usr/bin/env python
# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt
import libwtwav
from argparse import ArgumentParser

DEFAULTS = {
    "num_waveforms": 256,  # aka frames
    "num_samples": 2048,
    "bitwidth": 32,
    "exponent": 5,
    "mid_width_pct": 20,
    "mid_hoffset": 20
}


def debug(msg):
    if args.debug:
        print(msg)


# exponential
def curve(x1, y1, x2, y2, num_points):
    debug(f'curve: {x1} {y1} {x2} {y2} {num_points}')
    x = np.linspace(x1, x2, num_points)
    y = y1 + (y2 - y1) * (np.exp(args.exp * (x - x1)) - 1) / \
        (np.exp(args.exp * (x2 - x1)) - 1)
    if x1 < 0:
        y_rotated = y2 - (y - y1)
        return y_rotated[::-1]

    return y


def line(x1, y1, x2, y2, num_points):
    debug(f'line: {x1} {y1} {x2} {y2} {num_points}')
    if x1 == x2:
        y_values = np.linspace(y1, y2, num_points)
    else:
        x_values = np.linspace(x1, x2, num_points)
        y_values = y1 + ((y2 - y1) / (x2 - x1)) * (x_values - x1)
    return y_values


argp = ArgumentParser()
argp.add_argument(
    "-w", dest="num_waveforms", type=int,
    default=DEFAULTS['num_waveforms'],
    help="Number of frames/waveforms (%(default)s)")
argp.add_argument(
    "-s", dest="num_samples", type=int,
    default=DEFAULTS['num_samples'],
    choices=np.power(2, np.arange(4, 13)),
    help="Number of samples in one frame (%(default)s)")
argp.add_argument(
    "--bits", dest="bitwidth", type=int,
    default=DEFAULTS['bitwidth'],
    choices=[16, 32],
    help="Bits width (%(default)s)")
argp.add_argument(
    "-m", dest="mid_width_pct", type=int,
    default=DEFAULTS['mid_width_pct'],
    help="Percents in middle part (%(default)s)")
argp.add_argument(
    "-o", dest="mid_hoffset", type=int,
    default=DEFAULTS['mid_hoffset'],
    help="Percents of middle horizontal offset from y=0 (%(default)s)")
argp.add_argument(
    "-e", dest="exp", type=int,
    default=DEFAULTS['exponent'],
    choices=range(2, 10),
    help="Exponent of curve (%(default)s)")
argp.add_argument(
    "--graph", action='store_true', dest="graph", help="Plot graph")
argp.add_argument("--wav", action='store_true', dest="wav", help="Save wav")
argp.add_argument("--dpi", dest="dpi", type=int, help="Graph DPI")
argp.add_argument("-D", action='store_true', dest="debug", help="Debug")
args = argp.parse_args()

if not (args.wav or args.graph or args.debug):
    print(f'What to do - wav or graph?\n\n{argp.format_help()}')
    exit()

mid_samples = int((args.mid_width_pct / 100) * args.num_samples)
if mid_samples % 2 != 0:
    mid_samples -= 1
debug(
    f'mid_samples: {mid_samples} ({args.mid_width_pct}% of '
    f'{args.num_samples})')

mid_widths = np.zeros(args.num_waveforms, dtype=int)
for i in range(args.num_waveforms):
    c = round(mid_samples * i / (args.num_waveforms - 1))
    if c % 2 != 0:
        c -= 1
    mid_widths[i] = c
debug(f'mid_widths: {mid_widths}')

middle_hoffset = args.mid_hoffset * 0.01
# debug(f'middle_hoffset: {middle_hoffset}')

wf = np.zeros((args.num_waveforms, args.num_samples))
debug(f'wf shape: {wf.shape}')
xoffsets = np.linspace(0, args.mid_width_pct / 100, args.num_waveforms)

for i in range(args.num_waveforms):
    cx = xoffsets[i]
    debug(f'cx: {cx}')

    curve_len = args.num_samples // 2 - mid_widths[i] // 2
    debug(
        f'i: {i} curve_len: {curve_len}, mw: {mid_widths[i]}, '
        f'sum: {curve_len*2+mid_widths[i]}')

    ya1 = curve(-1, -1, -cx, -middle_hoffset, curve_len)
    debug(f'ya1: {ya1} ({len(ya1)})')
    ya2 = curve(cx, middle_hoffset, 1, 1, curve_len)
    debug(f'ya2: {ya2} ({len(ya2)})')
    ym = line(-cx, -middle_hoffset, cx, middle_hoffset, mid_widths[i])
    debug(f'ym: {ym} ({len(ym)})')
    y = np.concatenate((ya1, ym, ya2))
    debug(f'y: {y} {y.shape}')

    wf[i] = y

np.set_printoptions(linewidth=100, precision=2, suppress=True)

if args.debug:
    print(wf)
    exit()

if args.graph:
    if isinstance(args.dpi, int):
        plt.rcParams['figure.dpi'] = args.dpi

    time = np.arange(0, args.num_samples)
    # for graph in wf:
    #     plt.plot(time, graph)
    plt.plot(wf[0], label='first')
    plt.plot(wf[-1], label='last')
    plt.xlabel('X/Sample')
    plt.ylabel('Y/Amplitude')
    plt.title(
        f'Exponential curve e={args.exp} m={args.mid_width_pct}% '
        f's={args.num_samples} w={args.num_waveforms}')
    plt.grid(True)
    plt.legend()
    plt.show()

if args.wav:
    bn = '%sm_%sh_%se_%ss_%sw_%sb' % (args.mid_width_pct,
                                      args.mid_hoffset,
                                      args.exp,
                                      args.num_samples,
                                      args.num_waveforms,
                                      args.bitwidth)
    wav = libwtwav.Wav(wf, args.bitwidth, bn)
    wav.save()
